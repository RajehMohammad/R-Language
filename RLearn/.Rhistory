Nile
Nile
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <- length(fTenYears)
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <-  length(fTenYears)
sumF <- sum(fTenYears)
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <-  length(fTenYears)
sumF <- sum(fTenYears)
print(sumF)
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <-  length(fTenYears)
sumF <- sum(fTenYears)
print(sumF)
print(sum(fTenYears > 1200))
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <-  length(fTenYears)
sumF <- sum(fTenYears)
print(sumF)
print(sum(fTenYears > 1200))
mysum <- 0
for (vector in fTenYears){
if (vector > 1200){
mysum <- mysum + vector
}
}
print(mysum)
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <-  length(fTenYears)
sumF <- sum(fTenYears)
print(sumF)
print(sum(fTenYears > 1200))
mysum <- 0
for (i in seq(1,a,by=1)){
if (fTenYears[i] > 1000 && sTenYears[i] > 1000  ){
mysum <- mysum + fTenYears[i] + sTenYears[i]
}
}
print(mysum)
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <-  length(fTenYears)
b <-  length(sTenYears)
sumF <- sum(fTenYears)
print(sumF)
print(sum(fTenYears > 1200))
mysum <- 0
if(a ==b) {
for (i in seq(1,a,by=1)){
if (fTenYears[i] > 1000 && sTenYears[i] > 1000  ){
mysum <- mysum + fTenYears[i] + sTenYears[i]
}
}
print(mysum)
}
# Check Vector Index when value Grater Than 100
indexG1000 <- which(fTenYears > 1000)
print(indexG1000)
print(fTenYears[indexG1000])
print(index20)
fTenYears <- c(1120, 1160 , 963, 1210 ,1160, 1160,  813, 1230, 1370, 1140)
sTenYears <- c(995, 935, 1110,  994, 1020,  960, 1180,  799 , 958, 1140)
a <-  length(fTenYears)
b <-  length(sTenYears)
sumF <- sum(fTenYears)
print(sumF)
print(sum(fTenYears > 1200))
mysum <- 0
if(a ==b) {
for (i in seq(1,a,by=1)){
if (fTenYears[i] > 1000 && sTenYears[i] > 1000  ){
mysum <- mysum + fTenYears[i] + sTenYears[i]
}
}
print(mysum)
}
# Check Vector Index when value Grater Than 100
indexG1000 <- which(fTenYears > 1000)
print(indexG1000)
print(fTenYears[indexG1000])
index20 <- which(Nile > 1000)
print(index20)
print(Nile[index20])
vectortest <- seq(20,1000,length.out=30)
print(vectortest)
vectortest <- as.integer(seq(20,1000,length.out=30))
print(vectortest)
vector1 <- as.integer(seq(100,10000,length.out=50))
vector2 <- as.integer(seq(2,1000,length.out=55))
a  <- which(vector1 %% 2 == 0)
print(a)
print(vector1[a])
for(i in seq(1,length(vector2))){
if(vector2[i] %% 2 == 0 || vector1[i] %% 2 == 0 ){
index <- which(vector2 == i)
print(index)
print(vector2[index])
index <- which(vector1 == i)
print(index)
print(vector1[index])
}
}
f  <-  list(vector1 , vector2)
print(f)
print("f:")
f  <-  list(vector1 , vector2)
print("f:")
print(f)
vec1 <- (1:10)
print(vec1)
vec1 <- c(1:10)
print(vec1)
vec2 <- c(20:29)
print(vec2)
vec1 <- c(1:10)
print(vec1)
vec2 <- c(20:29)
print(vec2)
# print multiply each item in vec1 with same index in vec2
result1 <- vec1 * vec2
print(result1)
# print Add  each item in vec1 with same index in vec2
result1 <- vec1 + vec2
print(result1)
# print Divide  each item in vec1 with same index in vec2
result1 <- vec1 / vec2
print(result1)
# print reminder each item in vec1 with same index in vec2
result1 <- vec1 %% vec2
print(result1)
#print exponent each item in vec1 with same index in vec2
result1 <- vec1 ^ vec2
print(result1)
result2 <- vec1 / vec2
result1 <- as.integer(vec1 / vec2)
print(result2)
print(result1)
vec1 <- c(1:10)
print(vec1)
vec2 <- c(20:29)
print(vec2)
# print multiply each item in vec1 with same index in vec2
result1 <- vec1 * vec2
print(result1)
# print Add  each item in vec1 with same index in vec2
result1 <- vec1 + vec2
print(result1)
# print Divide  each item in vec1 with same index in vec2
result2 <- vec1 / vec2
result1 <- as.integer(vec1 / vec2)
print(result2)
print(result1)
# print reminder each item in vec1 with same index in vec2
result1 <- vec1 %% vec2
print(result1)
#print exponent each item in vec1 with same index in vec2
result1 <- vec1 ^ vec2
print(result1)
vec1 <- c(1:10)
print(vec1)
vec2 <- c(20:29)
print(vec2)
# print multiply each item in vec1 with same index in vec2
result1 <- vec1 * vec2
print(result1)
# print Add  each item in vec1 with same index in vec2
result1 <- vec1 + vec2
print(result1)
# print Divide  each item in vec1 with same index in vec2
print("print Divide  each item in vec1 with same index in vec2")
result2 <- vec1 / vec2
result1 <- as.integer(vec1 / vec2)
print(result2)
print(result1)
# print reminder each item in vec1 with same index in vec2
result1 <- vec1 %% vec2
print(result1)
#print exponent each item in vec1 with same index in vec2
result1 <- vec1 ^ vec2
print(result1)
for(i in seq(1,5,by=1)){
print("*")
}
for(i in seq(1,5,by=1)){
for(k in seq(1,i,by=1)){
print("*")
}
}
for(i in seq(1,5,by=1)){
for(k in seq(1,i,by=1)){
cat("*")
}
}
for(i in seq(1,5,by=1)){
for(k in seq(1,i,by=1)){
cat("*")
}
print("")
}
for(i in seq(1,5,by=1)){
for(k in seq(1,i,by=1)){
cat("*")
}
cat("\n")
}
for(i in seq(1,5,by=1)){
for(k in seq(1,i,by=1)){
cat("*")
}
cat("\n")
}
for(i in seq(5,1,by=-1)){
for(k in seq(1,i,by=1)){
cat("*")
}
cat("\n")
}
print(getwd())
#data <- read.csv("YajozSteet.csv",encoding='UTF-8')
#print(data)
scan("YajozSteet.csv",encoding='UTF-8',what='character',sep=',')
print(getwd())
#data <- read.csv("YajozSteet.csv",encoding='UTF-8')
#print(data)
scan("IstiklalStreet.csv",encoding='UTF-8',what='character',sep=',')
AOSD <- read.csv("IstiklalStreet.csv", fileEncoding = "utf8", row.names = NULL)
print(head(AOSD))
# Print the summary.
print(summary(emp.data))
# Create the data frame.
emp.data <- data.frame(
emp_id = c(1:5),
emp_name =  c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
# Add the "dept" coulmn.
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
v <- emp.data
print(v)
# Print the summary.
print(summary(emp.data))
# Create the data frame.
emp.data <- data.frame(
emp_id = c(1:5),
emp_name =  c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
# Add the "dept" coulmn.
emp.data$dept <- c("IT","Operations","IT","HR","Finance")
v <- emp.data
print(v)
# Print the summary.
print(summary(emp.data))
# Create the data frame.
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01","2013-09-23","2014-11-15","2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Extract Specific columns.
result <- data.frame(emp.data$emp_name,emp.data$salary)
print(result)
# Create the data frame.
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Extract first two rows.
result <- emp.data[1:2,]
print(result)
# Create the data frame.
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Extract first two rows.
result <- emp.data[1:2,]
print(result)
# Quick Examples
# R base - Select columns by name
df[,"name"]
are_number_amicable <- function(x,y){
x_divisors_sum <- get_sum_of_divisors(x)
y_divisors_sum <- get_sum_of_divisors(y)
return ((x_divisors_sum == y) && (y_divisors_sum == x))
}
get_sum_of_divisors <- function(n){
sum <- 0
limit <- n -1
for (i in 1:limit){
if(n %% i == 0){
sum <- sum +1
}
}
return(sum)
}
result <- are_number_amicable(220, 248)
print(result)
result <- are_numbers_amicable(15, 100)
are_number_amicable <- function(x,y){
x_divisors_sum <- get_sum_of_divisors(x)
y_divisors_sum <- get_sum_of_divisors(y)
return ((x_divisors_sum == y) && (y_divisors_sum == x))
}
get_sum_of_divisors <- function(n){
sum <- 0
limit <- n -1
for (i in 1:limit){
if(n %% i == 0){
sum <- sum +1
}
}
return(sum)
}
result <- are_number_amicable(220, 248)
print(result)
result <- are_number_amicable(15, 100)
print(result)  # expected false
result <- are_number_amicable(220, 248)
print(result)
result <- are_number_amicable(220, 248)
print(result)
are_number_amicable <- function(x,y){
print(x)
print(y)
x_divisors_sum <- get_sum_of_divisors(x)
y_divisors_sum <- get_sum_of_divisors(y)
return ((x_divisors_sum == y) && (y_divisors_sum == x))
}
get_sum_of_divisors <- function(n){
sum <- 0
limit <- n -1
for (i in 1:limit){
if(n %% i == 0){
sum <- sum +1
}
}
return(sum)
}
result <- are_number_amicable(220, 248)
print(result)
result <- are_number_amicable(15, 100)
print(result)  # expected false
are_number_amicable <- function(x,y){
x_divisors_sum <- get_sum_of_divisors(x)
y_divisors_sum <- get_sum_of_divisors(y)
return((x_divisors_sum == y) && (y_divisors_sum == x))
}
get_sum_of_divisors <- function(n) {
sum <- 0
limit <- n - 1
for (i in 1:limit) {
if (n %% i == 0) {
sum <- sum + i
}
}
return(sum)
}
result <- are_numbers_amicable(220, 284)
are_numbers_amicable <- function(x,y){
x_divisors_sum <- get_sum_of_divisors(x)
y_divisors_sum <- get_sum_of_divisors(y)
return((x_divisors_sum == y) && (y_divisors_sum == x))
}
get_sum_of_divisors <- function(n) {
sum <- 0
limit <- n - 1
for (i in 1:limit) {
if (n %% i == 0) {
sum <- sum + i
}
}
return(sum)
}
result <- are_numbers_amicable(220, 284)
print(result)  # expected true
result <- are_numbers_amicable(15, 100)
print(result)  # expected false
